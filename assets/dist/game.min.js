/*找茬游戏*/
function FullScreen(a){this.isFull=!1,////是否全屏
this.text="全屏",////按钮显示的文字
this.$ele=$("<span></span>"),/////按钮标签
this.$ele.css({width:"80px",height:"30px",lineHeight:"30px",backgroundColor:"orange",color:"white",textAlign:"center",position:"absolute",bottom:"40px",right:"20px",borderRadius:"8px",fontWeight:"bolder",zIndex:"1"}),this.$ele.text(this.text),a.append(this.$ele),
//////通过bind(this)方法把 this变量传递到click的处理函数中
this.$ele.click(this.Switch.bind(this))}function Audio(){this.audios=$.makeArray($("audio")),
// 背景音乐
this.music=this.audios[0],
////点击音乐
this.click=this.audios[1],
// 过关时的声音
this.pass=this.audios[2],
// 游戏通关时的声音
this.complete=this.audios[3],
// 超时的声音
this.timeout=this.audios[4]}function Scene(a,b){this.game=a,this.img=b}function SceneStart(a,b){b=b||"assets/images/0.jpg",
////调用Scene的构造函数
Scene.call(this,a,b),this.load()}function SceneComplete(a,b){b=b||"assets/images/complete.jpg",Scene.call(this,a,b)}function SecondManager(a,b,c){this.box=a,this.total=b||60,this.options={position:"absolute",left:"270px",bottom:"19px",fontSize:"36px",display:"inline-block",zIndex:"1"}}
////超时画面
function SceneTimeout(a,b,c){this.sceneGame=b,c=c||"assets/images/timeout.jpg",Scene.call(this,a,c)}
// 表示“还有X次不同”中的数字
function Label(a,b,c){this.box=a,
// 总共有几处不同，即初始值
this.total=b||5,
// 还剩几处不同，即当前值
this.value=this.total,this.options={position:"absolute",left:"556px",bottom:"23px",fontSize:"32px",display:"inline-block",color:"white",zIndex:"1"}}/**
 * 创建game对象 
 * @param {any} box 游戏内容的容器
 */
function Game(a){this.box=a,
////音效控制文件
this.audio=new Audio,this.audio.playMusic(),
/////标识游戏是否开始
this.started=!1,
/////全屏按钮
this.fullScreen=new FullScreen(this.box),
////开始监听点击事件
this.listen(),this.loadStartScene()}function SceneGame(a,b){
/////当前游戏进度
this.gameDataList=gameDataList,this.currentIndex=0,this.seconds=30,$(this.gameDataList).each(function(){$(this.diffs).each(function(){this.isFound=!1})}),this.gameData=this.gameDataList[this.currentIndex],b=b||this.gameData.src,
////调用Scene的构造函数
Scene.call(this,a,b),this.secondManager=new SecondManager(this.game.box,this.seconds),this.secondManager.show(),this.secondManager.set(this.timeout.bind(this),this.seconds),this.secondManager.start(),this.label=new Label(this.game.box,this.gameData.diffs.length),this.label.show()}FullScreen.prototype.constructor=FullScreen,FullScreen.prototype.Switch=function(){this.isFull=!this.isFull,this.text=this.isFull?"退出全屏":"全屏",this.$ele.text(this.text),$(document).fullScreen(this.isFull)},FullScreen.prototype.hide=function(){this.$ele.remove()},Audio.prototype.constructor=Audio,
////暂停所有的音乐
Audio.prototype.pauseAll=function(){this.audios.forEach(function(a){a.pause()})},
////播放背景音乐
Audio.prototype.playMusic=function(){this.pauseAll(),this.music.load(),this.music.play()},
////播放点击按钮生效
Audio.prototype.playClick=function(){this.click.load(),this.click.play(),this.muteMusic(),setTimeout(function(){this.recoverMusic()}.bind(this),500)},
// 播放过关音效
Audio.prototype.playPass=function(){this.muteMusic(!0),
// 在过关音效播放时阻止恢复背景音乐
// 防止点击鼠标时背景音乐提前恢复
this.pass.load(),this.pass.play(),
// 6秒之后恢复背景音乐
setTimeout(function(){this.recoverMusic(!0)}.bind(this),6e3)},
// 播放通关音效
Audio.prototype.playComplete=function(){this.muteMusic(!0),this.complete.load(),this.complete.play(),setTimeout(function(){this.recoverMusic(!0)}.bind(this),8e3)},
// 播放超时音效
Audio.prototype.playTimeout=function(){this.muteMusic(!0),this.timeout.load(),this.timeout.play(),setTimeout(function(){this.recoverMusic(!0)}.bind(this),4e3)},
//////背景音乐静音
Audio.prototype.muteMusic=function(a){this.music.volume=0,
////禁止恢复背景音效 防止在播放过场效果的时候 因为鼠标点击而直接恢复背景音乐
this.preventRecover=a},
////恢复背景音效
Audio.prototype.recoverMusic=function(a){
////强行恢复背景音效
a&&(this.preventRecover=!1),
/////如果禁止恢复为true直接返回
this.preventRecover||(this.music.volume=1)},Scene.prototype.constructor=Scene,
/////加载
/////$ele只是一种命名方式而已,
////通常在使用jquery的时候用到(表示一个jquery对象)
Scene.prototype.load=function(){this.$ele=$('<img src="'+this.img+'"/>'),this.$ele.css({width:"100%",height:"100%",position:"absolute",top:"0px",left:"0px"}),this.game.box.append(this.$ele),
//this.game.box.click(this.chkClickListener.bind(this));	
//
this.game.clickListener=this.clickListener.bind(this)},
// 表示点击事件监听函数，由子类负责实现
Scene.prototype.clickListener=function(){},
////卸载场景
Scene.prototype.unload=function(){this.$ele.remove()},SceneStart.prototype=Object.create(Scene.prototype),SceneStart.prototype.constructor=SceneStart,SceneStart.prototype.clickListener=function(a,b){
//var sceneGame = new SceneGame(this.game);
return!this.game.started&&void(b>335&&b<415&&a>640&&a<860&&(this.game.fullScreen.hide(),this.game.started=!0,this.$ele.fadeOut(1500,function(){this.$ele.remove();
//this.game.audio.playPass();
var a=new SceneGame(this.game);a.load()}.bind(this))))},
// 构造原型链，实现继承
SceneComplete.prototype=Object.create(Scene.prototype),SceneComplete.prototype.constructor=SceneComplete,
// 重写load方法，添加下滑效果
SceneComplete.prototype.load=function(a){Scene.prototype.load.call(this,a),this.$ele.hide().delay(300).slideDown(1e3,function(){
// 删除通关场景后面的所有标签元素
// 即之前的游戏场景留下的内容
this.$ele.prevAll().remove()}.bind(this))},
// 重写点击事件监听函数，点击重新开始时加载开始场景，
// 让游戏通关图片上滑并卸载通关场景
SceneComplete.prototype.clickListener=function(a,b){a>351&&a<548&&b>480&&b<551&&(this.game.loadStartScene(),this.$ele.slideUp(1e3,function(){this.unload()}.bind(this)))},
// 将倒计时显示在页面上
SecondManager.prototype.show=function(){this.$ele=$("<span>").text(this.total<10?"0"+this.total:this.total).css(this.options).prependTo(this.box)},/**
 * 重新设置倒计时的初始值，和倒计时到0时的回调函数
 * @param 回调函数
 * @param total 时间
 */
SecondManager.prototype.set=function(a,b){this.complete=a,this.seconds=this.total=b||60;var c=this.seconds<10?"0"+this.seconds:this.seconds;this.$ele.text(c),clearInterval(this.timer)},
// 启动倒计时，当倒计时到0后，调用回调函数
SecondManager.prototype.start=function(){this.timer=setInterval(function(){this.seconds--,text=this.seconds<10?"0"+(this.seconds<0?0:this.seconds):this.seconds,this.$ele.text(text),this.seconds<=-1&&(clearInterval(this.timer),"function"==typeof this.complete&&this.complete(this))}.bind(this),1e3)},
// 停止倒计时
SecondManager.prototype.stop=function(){clearInterval(this.timer)},
///原型链
SceneTimeout.prototype=Object.create(Scene.prototype),SceneTimeout.prototype.constructor=SceneTimeout,
/////重写load方法
SceneTimeout.prototype.load=function(a){Scene.prototype.load.call(this,a),this.$ele.prevAll().remove(),
// 实现下滑动画效果
this.$ele.hide().delay(300).slideDown(1e3)},SceneTimeout.prototype.clickListener=function(a,b){a>351&&a<548&&b>480&&b<551&&(this.game.loadStartScene(),this.$ele.slideUp(1e3,function(){this.unload()}.bind(this)))},
// 把数字显示到页面上
Label.prototype.show=function(){this.$ele=$("<span>").text(this.value).css(this.options).prependTo(this.box)},
// 重新设置初始值和值变成0时的回调函数
Label.prototype.set=function(a){this.value=a,this.$ele.text(this.value)},
// 对容器添加点击事件 播放点击音效
Game.prototype.listen=function(){this.box.click(function(a){var b=a.offsetX,c=a.offsetY;console.log("click-x:%d,click-y:%d",b,c),
/////播放点击音效
this.audio.playClick(),"function"==typeof this.clickListener&&this.clickListener(b,c)}.bind(this))},Game.prototype.loadStartScene=function(){
/////创建开始场景
new SceneStart(this);this.started=!1};var gameDataList=[{src:"assets/images/1.jpg",diffs:[{x:660,y:80,r:30},{x:790,y:75,r:35},{x:865,y:120,r:25},{x:495,y:405,r:45},{x:620,y:415,r:40}]},{src:"assets/images/2.jpg",diffs:[{x:550,y:100,r:30},{x:635,y:370,r:25},{x:566,y:420,r:48},{x:723,y:424,r:33},{x:862,y:406,r:31}]},{src:"assets/images/3.jpg",diffs:[{x:85,y:395,r:30},{x:379,y:338,r:35},{x:629,y:415,r:33},{x:707,y:393,r:35},{x:869,y:385,r:30}]}];SceneGame.prototype=Object.create(Scene.prototype),SceneGame.prototype.constructor=SceneGame,SceneGame.prototype.clickListener=function(a,b){
/////坐标范围判断
var c=this;$(this.gameData.diffs).each(function(){var d=1*this.x+1*this.r,e=1*this.x-1*this.r,f=1*this.y-1*this.r,g=1*this.y+1*this.r;
/////坐标位置判断
if(a>e&&a<d&&b>f&&b<g&&!this.isFound){if(!this.isFound){var h=$("<div></div>");h.css({position:"absolute",left:e+"px",top:f+"px",border:"5px solid red",borderRadius:"50%",width:2*this.r+"px",height:2*this.r+"px"}),this.isFound=!0}c.game.box.append(h);var i=c.gameData.diffs.filter(function(a){return 1==a.isFound}).length;if(c.label.set(c.gameData.diffs.length-i),i==c.gameData.diffs.length){////当前游戏关卡前进一个
if(
//alert("您已经过关!");
//
// 停止倒计时，播放音效
c.secondManager.stop(),c.currentIndex+=1,c.currentIndex==c.gameDataList.length){var j=new SceneComplete(c.game);return c.game.audio.playComplete(),j.load(),!1}c.game.audio.playPass(),c.game.box.find("div").fadeOut(2500,function(){c.game.box.find("div").remove(),c.secondManager.set(c.timeout.bind(this),c.seconds),c.secondManager.start()}),c.$ele.fadeOut(2500,function(){c.gameData=c.gameDataList[c.currentIndex],////重新指定游戏数据
c.img=c.gameData.src,///获取当前关卡的图
c.unload(),c.load(),c.secondManager.set(c.timeout.bind(this),c.seconds),c.secondManager.start()}),
/////把计时器显示出来
c.secondManager.$ele.fadeOut(2500,function(){c.secondManager.$ele.fadeIn()}),c.label.$ele.fadeOut(2500,function(){c.label.$ele.fadeIn()})}return!1}})},
// 处理游戏超时的方法
SceneGame.prototype.timeout=function(){this.game.audio.playTimeout();var a=new SceneTimeout(this.game,this);a.load(!0)};
/*! game-git 最后修改于： 2016-07-10 */